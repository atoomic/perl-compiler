From ba5af7a4a841195b47feaa5dd3dd2d9fe3e31316 Mon Sep 17 00:00:00 2001
From: Nicolas Rochelemagne <rochelemagne@cpanel.net>
Date: Mon, 28 Sep 2015 17:45:27 -0500
Subject: [PATCH 096/352] B::C patch for op/caller.t

---
 t/op/caller.t | 45 +++++++++++++++++++++++++++++++++------------
 1 file changed, 33 insertions(+), 12 deletions(-)

diff --git a/t/op/caller.t b/t/op/caller.t
index 54a6bac..c71beef 100644
--- a/t/op/caller.t
+++ b/t/op/caller.t
@@ -3,14 +3,21 @@
 
 BEGIN {
     chdir 't' if -d 't';
-    @INC = '../lib';
     require './test.pl';
-    plan( tests => 95 );
 }
 
-my @c;
+my @tests;
+plan( tests => 95 );
+
+print "# Tests with caller(0)\n";
+
+foreach my $t ( @tests ) {
+    my $s = \&{'main::'.$t->{type}};
+    $s->( @{$t->{args}}, $t->{txt} );    
+}
+print "# end of BEGIN tests\n";
 
-BEGIN { print "# Tests with caller(0)\n"; }
+my @c;
 
 @c = caller(0);
 ok( (!@c), "caller(0) in main program" );
@@ -36,8 +43,8 @@ ok( $c[4], "hasargs true with deleted sub" );
 
 BEGIN {
  require strict;
- is +(caller 0)[1], __FILE__,
-  "[perl #68712] filenames after require in a BEGIN block"
+ push @tests, { type => 'is', args => [ +(caller 0)[1], __FILE__ ], 
+    txt => "[perl #68712] filenames after require in a BEGIN block" };
 }
 
 print "# Tests with caller(1)\n";
@@ -97,6 +104,10 @@ sub testwarn {
     check_bits( (caller(0))[9], $w, "warnings match caller ($id)");
 }
 
+sub get_caller_0_9 {
+    return (caller(0))[9];
+}
+
 {
     no warnings;
     # Build the warnings mask dynamically
@@ -111,20 +122,30 @@ sub testwarn {
 
     # The repetition number must be set to the value of $BYTES in
     # lib/warnings.pm
-    BEGIN { check_bits( ${^WARNING_BITS}, "\0" x 15, 'all bits off via "no warnings"' ) }
+    BEGIN { 
+        push @tests, { type => 'check_bits', args => [ ${^WARNING_BITS}, "\0" x 15 ], 
+            txt => 'all bits off via "no warnings"' };
+    }
     testwarn("\0" x 15, 'no bits');
 
     use warnings;
-    BEGIN { check_bits( ${^WARNING_BITS}, $default,
-			'default bits on via "use warnings"' ); }
-    BEGIN { testwarn($default, 'all'); }
+    BEGIN { 
+        push @tests, { type => 'check_bits', args => [ ${^WARNING_BITS}, $default ], 
+            txt => 'default bits on via "use warnings"' };
+    }
+    BEGIN { 
+        push @tests, { type => 'check_bits', args => [ get_caller_0_9(), $default ] };        
+        #testwarn($default, 'all'); 
+    }
     # run-time :
     # the warning mask has been extended by warnings::register
     testwarn($registered, 'ahead of w::r');
 
     use warnings::register;
-    BEGIN { check_bits( ${^WARNING_BITS}, $registered,
-			'warning bits on via "use warnings::register"' ) }
+    BEGIN { 
+        push @tests, { type => 'check_bits', args => [ ${^WARNING_BITS}, $registered ], 
+            txt => 'warning bits on via "use warnings::register"' };
+    }
     testwarn($registered, 'following w::r');
 }
 
-- 
2.5.0

