/* [% creator %] */

[% IF debug.flags AND DEBUG_LEAKING_SCALARS -%]
#define DEBUG_LEAKING_SCALARS 1
[% END -%]

[% IF debug.benchmark -%]
#define DEBUG_BENCHMARK 1
[% END -%]

#define CopSTASHPVN_set(c,pv, len, flags)    CopSTASH_set((c), gv_stashpvn(pv,len,flags|GV_ADD))

#define PERL_CORE /* Needed for some extensions perl core refeses to export (win32 only)*/
#include "EXTERN.h" /* Embedded interface */
#include "perl.h"   /* API interface */
#include "XSUB.h"   /* XS interface */

#ifdef DEBUG_BENCHMARK
#include <sys/time.h>

struct timespec start, end;
uint64_t delta_us;
PerlIO * PIO_stdout;

#define benchmark_time(msg) clock_gettime(CLOCK_MONOTONIC_RAW, &end); delta_us = (end.tv_sec - start.tv_sec) * 1000000000 + (end.tv_nsec - start.tv_nsec); PerlIO_printf(PIO_stdout, "--USECONDS %lu == %s\n", delta_us, msg )
#else
#define benchmark_time(msg) 
#endif /* end of DEBUG_BENCHMARK */

/* Workaround for mapstart: the only op which needs a different ppaddr */
#undef Perl_pp_mapstart
#define Perl_pp_mapstart Perl_pp_grepstart
#undef OP_MAPSTART
#define OP_MAPSTART OP_GREPSTART

 

#ifdef BROKEN_STATIC_REDECL
#define Static extern
#else
#define Static static
#endif /* BROKEN_STATIC_REDECL */

/* TODO: Why was this removed from perl core? */
/* No longer available when C<PERL_CORE> is defined. */
#ifndef Nullsv
#  define Null(type) ((type)NULL)
#  define Nullsv Null(SV*)
#  define Nullhv Null(HV*)
#  define Nullgv Null(GV*)
#  define Nullop Null(OP*)
#endif
#ifndef GV_NOTQUAL
#  define GV_NOTQUAL 0
#endif

#define XS_DynaLoader_boot_DynaLoader boot_DynaLoader
EXTERN_C void boot_DynaLoader (pTHX_ CV* cv);

static void xs_init (pTHX);
static void dl_init (pTHX);

typedef struct shared_he SHARED_HE;

/* these bc_*bodyless* macros are just using an extra parens around sv, should patch perl */
#define bc_SET_SVANY_FOR_BODYLESS_IV(sv) \
       SvANY(sv) =   (XPVIV*)((char*)&((sv)->sv_u.svu_iv) - STRUCT_OFFSET(XPVIV, xiv_iv))

#define bc_SET_SVANY_FOR_BODYLESS_UV(sv) \
       SvANY(sv) =   (XPVUV*)((char*)&((sv)->sv_u.svu_uv) - STRUCT_OFFSET(XPVUV, xuv_uv))


#define IMMORTAL_PL_strtab 0x7ffffff

#define STATIC_SHARED_HE_ALLOC(index, length_of_key, key_string, flags_byte) \
    struct shared_he_struct_##index { HE *hent_next; HEK *hent_hek; union { SV *hent_val;  Size_t hent_refcount; } he_valu;  U32 hek_hash;  I32 hek_len;  char hek_key[ length_of_key + 1]; char flags; }; \
    struct shared_he_struct_##index shared_he_##index = { NULL, NULL, { .hent_refcount = IMMORTAL_PL_strtab }, 0, length_of_key, key_string, flags_byte  };
    
/* sharedhe definitions using the STATIC_SHARED_HE_ALLOC macro */
[% section.sharedhe.output( "%s\n" ) %]

Static SHARED_HE* sharedhe_list[[% section.sharedhe.index + 1 %]] =  {
[%- FOREACH num IN [ 0 .. section.sharedhe.index ] %]
    (SHARED_HE*) &shared_he_[% num %],
[%- END %]
};

static int fast_perl_destruct( PerlInterpreter *my_perl );
static void my_curse( pTHX_ SV* const sv );

/* TODO: Not provided in perl core? */
#ifndef dVAR
# ifdef PERL_GLOBAL_STRUCT
#  define dVAR		pVAR    = (struct perl_vars*)PERL_GET_VARS()
# else
#  define dVAR		dNOOP
# endif
#endif

[%# Add static modules like " Win32CORE". This data comes from $Config{static_ext} %]
[% FOREACH xsub IN stashxsubs %]
EXTERN_C void boot_[% xsub %] (pTHX_ CV* cv);
[% END %]

/************************************************************************************************************
*
*       output_all()
*
*************************************************************************************************************/

[% IF section.sym.comment() %]
    /* [% section.sym.comment() %] */
[% END %]
[% section.sym.output( "#define %s\n" ) %]

/*  output_declarations() called by output_all() */

#define UNUSED 0
#define sym_0 0

PERL_STATIC_INLINE HEK *
my_share_hek( pTHX_ const char *str, I32 len, register U32 hash );
#undef share_hek
#define share_hek(str, len, hash) my_share_hek( aTHX_ str, len, hash );

/* unfortunately we have to override this perl5.22 struct.
   The Padname string buffer in xpadn_str is pointed by xpadn_pv.
*/
#define _PADNAME_BASE \
    char *     xpadn_pv;               \
    HV *       xpadn_ourstash;         \
    union {                            \
       HV *    xpadn_typestash;        \
       CV *    xpadn_protocv;          \
    } xpadn_type_u;                    \
    U32                xpadn_low;              \
    U32                xpadn_high;             \
    U32                xpadn_refcnt;           \
    int                xpadn_gen;              \
    U8         xpadn_len;              \
    U8         xpadn_flags

struct my_padname_with_str {
#ifdef PERL_PADNAME_MINIMAL
    _PADNAME_BASE;
#else
    struct padname     xpadn_padname;
#endif
    char               xpadn_str[60]; /* longer lexical upval names are forbidden for now */
};

/* Missing type defs in perl so we'll make our own. */
typedef struct my_padname_with_str MyPADNAME;

typedef struct { U32 a; U32 b; }  ASSIGN_HEKKEY2PV;

/*
    Tricky hack for -fcog since 5.10 on !c99 compilers required. We need a char* as
    *first* sv_u element to be able to statically initialize it. A int does not allow it.
    gcc error: initializer element is not computable at load time
    We introduce a SVPV as SV.
    In core since 5.12
*/

typedef struct p5rx RE;
Static IV PL_sv_objcount = 0; /* deprecated with 5.21.1 but still needed and used */
SV* sv;
[% IF gv_index %]
Static GV *dynamic_gv_list[[% gv_index %]];
[% END %]

/* back in output_all() */

/* define all Static sections */
[% FOREACH sect IN section_list -%]
[% lines = section.$sect.index + 1 -%]
[% NEXT IF lines == 0 -%]
Static [% section.$sect.typename() %] [% section.$sect.name() %]_list[[% lines %]];
[% END -%]

/* hack for when Perl accesses PVX of GVs */
Static const char emptystring[] = "\0";

/* newXS for core XS needs a filename */
Static const char xsfile[] = "universal.c";

#define ptr_undef NULL
#undef CopFILE_set
#define CopFILE_set(c,pv)  CopFILEGV_set((c), gv_fetchfile(pv))

/* PadlistNAMES broken as lvalue with v5.21.6-197-g0f94cb1,
    fixed with 5.22.1 and 5.23.0 by commit 73949fca08
TODO: REMOVE ME after 5.22.1 or 5.23.0 is released. */
#undef PadlistNAMES
#define PadlistNAMES(pl)       *((PADNAMELIST **)PadlistARRAY(pl))

[% IF init2_remap.size and !HAVE_DLFCN_DLOPEN %]
XS(XS_DynaLoader_dl_load_file);
XS(XS_DynaLoader_dl_find_symbol);
[% END %]

[% IF section.const.comment() %]
    /* [% section.const.comment() %] */
[% END %]
/* <const.output> */
[% section.const.output( "%s\n" ) %]
/* </const.output> */

[% IF section.decl.comment() %]
    /* [% section.decl.comment() %] */
[% END %]
/* <decl.output> */
[% section.decl.output( "%s\n" ) %]
/* </decl.output> */

[% IF devel_peek_needed %]
static void
S_do_dump(pTHX_ SV *const sv, I32 lim)
{
    dVAR;
    SV *pv_lim_sv = get_sv("Devel::Peek::pv_limit", 0);
    const STRLEN pv_lim = pv_lim_sv ? SvIV(pv_lim_sv) : 0;
    SV *dumpop = get_sv("Devel::Peek::dump_ops", 0);
    const U16 save_dumpindent = PL_dumpindent;
    PL_dumpindent = 2;
    do_sv_dump(0, Perl_debug_log, sv, 0, lim,
	       (bool)(dumpop && SvTRUE(dumpop)), pv_lim);
    PL_dumpindent = save_dumpindent;
}
static OP *
S_pp_dump(pTHX)
{
    dSP;
    const I32 lim = PL_op->op_private == 2 ? (I32)POPi : 4;
    dPOPss;
    S_do_dump(aTHX_ sv, lim);
    RETPUSHUNDEF;
}
[% END %]

/*
    cop_list - array of cops in the code. for debugging, line number info. State/Context op. "Every ; is a cop."
    op_list  - Chain of operations
    unop_list - Unary operations
    binop_list - Binary argument operation: first/last aren't useful to runtime but might be introspected by certain modules.
    listop_list - Op chains run.c
    svop_list - all scalars
    xpv_list - Additional DATA for SVs ( PV body )
    xpvav_list - Additional data for arrays
    xpvhv_list - Additional data for hashes
    xpviv_list - Additional data for PVIV
    xpvnv_list - Additional data for PVNV
    xpvmg_list - magic
    xpvio_list - iosect - initial state of all file handles
*/

[% FOREACH sect IN section_list %]
[% lines = section.$sect.index + 1 %]
[% NEXT IF lines == 0 %]
Static [% section.$sect.typename() %] [% section.$sect.name() %]_list[[% lines %]] = {
[% IF section.$sect.comment() %]
    /* [% section.$sect.comment() %] */
[% END  %]
[% section.$sect.output("    { %s }, /* %s_list[%d] %s */%s\n") %]
};

[% END %]

static void init_pl_strtab(pTHX) {
/* only init PL_strtab if we have content for it */
[% IF section.sharedhe.index + 1 > 0 %]

    if (PL_hash_seed_set == FALSE) {
        Perl_get_hash_seed(aTHX_ PL_hash_seed);
        PL_hash_seed_set= TRUE;
    }

    PL_strtab = newHV();

    /* manual malloc */    
    //char * array;
    //Newxz (array, PERL_HV_ARRAY_ALLOC_BYTES ([% PL_strtab_max %]) + sizeof(struct xpvhv_aux), char);
    //HvARRAY (PL_strtab) = (HE **) array;
    
    /* automatic malloc */    
    hv_ksplit(PL_strtab, [% PL_strtab_max %]);
    HvSHAREKEYS_off(PL_strtab);                        /* mandatory */
    //SvOOK_on(PL_strtab);

    {
        int i;
        HE   *entry;
        HE  **oentry;
        HEK  *hek_struct;

        //HvMAX(PL_strtab) = [% PL_strtab_max - 1 %];
        HvTOTALKEYS(PL_strtab) = [% section.sharedhe.index + 1 %];
        SvREFCNT(PL_strtab) = 99999;

        for (i=0; i < [% section.sharedhe.index + 1 %]; i++) {
            entry = &(sharedhe_list[i]->shared_he_he);
            hek_struct = &(sharedhe_list[i]->shared_he_hek);

            HeKEY_hek(entry) = hek_struct;
            PERL_HASH (HEK_HASH(hek_struct), HEK_KEY(hek_struct), HEK_LEN(hek_struct));

            /* Insert the hes */
            oentry = &(HvARRAY (PL_strtab))[HEK_HASH(hek_struct) & (I32) [% PL_strtab_max - 1 %]  ];
            HeNEXT(entry) = *oentry;
            *oentry = entry;
        }
    }

[% END %]
}

static void init_assign(pTHX) {
    U32 i;
[% IF section.assign_hekkey2pv.index + 1 > 0 %]
    for (i=0; i < [% section.assign_hekkey2pv.index + 1 %]; i++) {
        sv_list[assign_hekkey2pv_list[i].a].sv_u.svu_pv = sharedhe_list[assign_hekkey2pv_list[i].b]->shared_he_hek.hek_key;
    }
[% END %]
}

/* handy helpers for B::C */

int svsize = sizeof(SV*);
SV ** INITAv(AV * av, int count) {
/* Bypassing Perl_safesysmalloc on darwin fails with "free from wrong pool", test 25.
   So with DEBUGGING perls we have to track memory and use calloc. */
    SV **svp;
#if defined(MYMALLOC)
    Newx(svp, count, SV*);
#else
  #ifdef PERL_TRACK_MEMPOOL
    svp = (SV**)Perl_safesysmalloc(count * svsize);
  #else
    svp = (SV**)malloc(count * svsize);
  #endif
#endif
    AvALLOC(av) = svp;
    AvARRAY(av) = svp;
    return svp;
}

static void HvSETUP(HV* hv, U32 size) {
    char *array;
    /* malloc the hash array + the xpvhv_aux which is part of it */
    Newxz (array, PERL_HV_ARRAY_ALLOC_BYTES (size) + sizeof(struct xpvhv_aux), char);

    /* setting the hash array to the HV (in sv_list) in sv_any */
    HvARRAY(hv) = (HE **) array;

    return;
}

static void HvAddEntry(HV* hv, SV* value, SHARED_HE* hek, I32 max) {
    HE **oentry;
    HE *entry;

    entry            = (HE*) safemalloc(sizeof(HE));
    HeKEY_hek(entry) = &(hek->shared_he_hek);
    HeVAL (entry)    = value;
    oentry           = &(HvARRAY (hv))[HEK_HASH(&(hek->shared_he_hek)) & max];
    HeNEXT(entry)    = *oentry;
    *oentry          = entry;

    return;
}

PADNAME ** INITPADNAME(PADNAMELIST *padname, int count) {
    PADNAME **svp;
    PADNAMELIST *padnl = padname;
    Newxz(svp, count, PADNAME *);
    PadnamelistARRAY(padnl) = svp;
    return svp;
}

PAD ** INITPADLIST(PADLIST *pad, int count) {
    PAD **svp;
    PADLIST *padl = pad;
    Newxz(svp, count, PAD *);
    PadlistARRAY(padl) = svp;
    return svp;
}

/* end of handy helpers */

static void perl_init0(pTHX) { /* fixup_ppaddr */
[% section.init0.output( "    %s\n" ) %]
};

[% IF section.init.comment() %]
    /* [% section.init.comment() %] */
[% END %]
[% section.init.output( "    %s\n", init_name ) %]

/* deferred init1 of regexp */
[% IF section.init1.comment() %]
    /* [% section.init1.comment() %] */
[% END %]
[% section.init1.output( "    %s\n", "perl_init1" ) %]

[% IF verbose %]
/* deferred init of XS/Dyna loaded modules */
[% END %]

[% IF section.init2.comment() %]
    /* [% section.init2.comment() %] */
[% END %]
[% section.init2.output( "    %s\n", 'perl_init2' ) %]

[% IF verbose %]
/*
    COMPILE STATS:  [% compile_stats %]
     NULLOP count:  [% nullop_count %]
*/
[% END %]

/************************************************************************************************************
*
*       output_main_rest()
*
*************************************************************************************************************/

/* The first assignment got already refcount bumped */
PERL_STATIC_INLINE HEK * 
my_share_hek( pTHX_ const char *str, I32 len, register U32 hash ) {
    if (!hash) {
      PERL_HASH(hash, str, abs(len));
    }
    return share_hek_hek(Perl_share_hek(aTHX_ str, len, hash));
}

static void
my_curse( pTHX_ SV* const sv ) {
    dSP;
    dVAR;
    HV* stash;

    assert(SvOBJECT(sv));
    do {
        stash = SvSTASH(sv);
        assert(SvTYPE(stash) == SVt_PVHV);
	if (HvNAME(stash)) {
	    CV* destructor = NULL;
	    if (!SvOBJECT(stash)) destructor = (CV *)SvSTASH(stash);
	    if (!destructor
                || HvMROMETA(stash)->destroy_gen != PL_sub_generation
	    ) {
            GV * const gv = gv_fetchmeth_autoload(stash, "DESTROY", 7, 0);

            if (gv) {
                destructor = GvCV(gv);
                if (!SvOBJECT(stash)) {
                    SvSTASH(stash) = destructor ? (HV *)destructor : ((HV *)0)+1;
                    HvAUX(stash)->xhv_mro_meta->destroy_gen = PL_sub_generation;
                }
            }
	    }
	    assert(!destructor || destructor == ((CV *)0)+1
		   || SvTYPE(destructor) == SVt_PVCV);
	    if (destructor && destructor != ((CV *)0)+1
		/* A constant subroutine can have no side effects, so
		   don't bother calling it.  */
		&& !CvCONST(destructor)
		/* Don't bother calling an empty destructor or one that
		   returns immediately. */
		&& (CvISXSUB(destructor)
		|| (CvSTART(destructor)
		    && (CvSTART(destructor)->op_next->op_type != OP_LEAVESUB)
		    && (CvSTART(destructor)->op_next->op_type != OP_PUSHMARK
			|| CvSTART(destructor)->op_next->op_next->op_type != OP_RETURN
		       )
		   ))
	       )
	    {
		SV* const tmpref = newRV(sv);
		DEBUG_D(PerlIO_printf(Perl_debug_log, "Calling %s::DESTROY\n", HvNAME(stash)));
		SvREADONLY_on(tmpref); /* DESTROY() could be naughty */
		ENTER;
		PUSHSTACKi(PERLSI_DESTROY);
		EXTEND(SP, 2);
		PUSHMARK(SP);
		PUSHs(tmpref);
		PUTBACK;
		call_sv((SV*)destructor, G_DISCARD|G_EVAL|G_KEEPERR|G_VOID);
		POPSTACK;
		SPAGAIN;
		LEAVE;
		if(SvREFCNT(tmpref) < 2) {
		    /* tmpref is not kept alive! */
		    SvREFCNT(sv)--;
		    SvRV_set(tmpref, NULL);
		    SvROK_off(tmpref);
		}
		SvREFCNT_dec(tmpref);
	    }
	}
    } while (SvOBJECT(sv) && SvSTASH(sv) != stash);

    if (SvOBJECT(sv)) {
	/* Curse before freeing the stash, as freeing the stash could cause
	   a recursive call into S_curse. */
	SvOBJECT_off(sv);	/* Curse the object. */
	SvSTASH_set(sv,0);	/* SvREFCNT_dec may try to read this */
    }
}

static int fast_perl_destruct( PerlInterpreter *my_perl ) {
    dVAR;
#ifdef DEBUGGING
    VOL signed char destruct_level;  /* see possible values in intrpvar.h */
#endif
#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
    pid_t child;
#endif

    PERL_UNUSED_ARG(my_perl);

    assert(PL_scopestack_ix == 1);

    /* wait for all pseudo-forked children to finish */
    PERL_WAIT_FOR_CHILDREN;

#ifdef DEBUGGING
    destruct_level = PL_perl_destruct_level;
    {
	const char * const s = PerlEnv_getenv("PERL_DESTRUCT_LEVEL");
	if (s) {
            const int i = atoi(s);
	    if (destruct_level < i) destruct_level = i;
#ifdef PERL_TRACK_MEMPOOL
            /* RT #114496, for perl_free */
            PL_perl_destruct_level = i;
#endif
	}
    }
#endif

    if (PL_exit_flags & PERL_EXIT_DESTRUCT_END) {
        dJMPENV;
        int x = 0;
        JMPENV_PUSH(x);
        if (PL_endav && !PL_minus_c) {
            PL_phase = PERL_PHASE_END;
            call_list(PL_scopestack_ix, PL_endav);
        }
        JMPENV_POP;
    }
    LEAVE;
    FREETMPS;
    assert(PL_scopestack_ix == 0);

    /* Need to flush since END blocks can produce output */
    my_fflush_all();

    PL_main_start = NULL;
    PL_main_cv = NULL;
    PL_curcop = &PL_compiling;
    PL_phase = PERL_PHASE_DESTRUCT;

    if (PL_threadhook(aTHX)) {
        /* Threads hook has vetoed further cleanup */
	PL_veto_cleanup = TRUE;
        return STATUS_EXIT;
    }
    PerlIO_destruct(aTHX);

    /* B::C -O3 specific: first curse (i.e. call DESTROY) all our static SVs */
    if (PL_sv_objcount) {
        int i = 1;
        DEBUG_D(PerlIO_printf(Perl_debug_log, "\nCursing named global static sv_arena:\n"));
        PL_in_clean_all = 1;
        for (; i < SvREFCNT(&sv_list[0]); i++) {
            SV *sv = &sv_list[i];
            if (SvREFCNT(sv)) {
                if (SvTYPE(sv) == SVt_IV && SvROK(sv))
                    sv = SvRV(sv);
                if (sv && SvOBJECT(sv) && SvTYPE(sv) >= SVt_PVMG && SvSTASH(sv)
                    && SvTYPE(sv) != SVt_PVCV && SvTYPE(sv) != SVt_PVIO
                    && PL_defstash /* Still have a symbol table? */
                    && SvDESTROYABLE(sv))
                {
	            SvREFCNT(sv) = 0;
                    my_curse(aTHX_ sv);
                }
            }
        }
    }
    if (DEBUG_D_TEST) {
        SV* sva;
        PerlIO_printf(Perl_debug_log, "\n");
        for (sva = PL_sv_arenaroot; sva; sva = (SV*)SvANY(sva)) {
            PerlIO_printf(Perl_debug_log, "sv_arena: 0x%p - 0x%p (%lu)\n",
              sva, sva+SvREFCNT(sva), (long unsigned int) 0+SvREFCNT(sva));
        }
    }

    if (PL_sv_objcount) {
	PL_in_clean_all = 1;
	sv_clean_objs(); /* and now curse the rest */
	PL_sv_objcount = 0;
    }
    PL_warnhook = NULL;
    PL_diehook = NULL;
    /* call exit list functions */
    while (PL_exitlistlen-- > 0)
	PL_exitlist[PL_exitlistlen].fn(aTHX_ PL_exitlist[PL_exitlistlen].ptr);
    PL_exitlist = NULL;

#if defined(PERLIO_LAYERS)
    PerlIO_cleanup(aTHX);
#endif
    return 0;
}

/* yanked from perl.c */
static void
xs_init(pTHX)
{
	char *file = __FILE__;
	dTARG; dSP;

/*   Was commented out in code. not sure what the FIXME is about.
[% IF staticxs %]
#undef USE_DYNAMIC_LOADING
[% END %]
*/

#ifdef USE_DYNAMIC_LOADING
    newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, file);
#endif

/* XS bootstrapping code*/
    SAVETMPS;
    targ=sv_newmortal();

[% FOREACH stashname IN static_ext.keys.sort %]
    newXS("[% stashname %]\::bootstrap", boot_[% stashname.replace('::', '__') %], file);
[% END %]

#ifdef USE_DYNAMIC_LOADING
    PUSHMARK(sp);
    XPUSHp("DynaLoader", 10);
    PUTBACK;
    boot_DynaLoader(aTHX_ get_cv("DynaLoader::bootstrap", GV_ADD));
    SPAGAIN;
#endif

[% FOREACH stashname IN xsub.keys.sort %]
[% NEXT IF static_ext.$stashname OR xsub.$stashname.match('^Dynamic') %]
[% stashxsub = stashname.replace('::', '__') %]
    PUSHMARK(sp);
    XPUSHp("[% stashname %]", [% stashname.length %]); /* "::bootstrap" gets appended, TODO: "strdup($stashname)" */
    PUTBACK;
    boot_[% stashxsub %](aTHX_ NULL);
    SPAGAIN;
        }
[% END %]

    FREETMPS;
/* end XS bootstrapping code */
}

[% optimizer.dynaloader.boot %]

static void
dl_init(pTHX)
{
	/* char *file = __FILE__; */
[% IF optimizer.dynaloader.dl %]
    dTARG;
    dSP;
/* DynaLoader bootstrapping */
    ENTER;
  [% IF optimizer.dynaloader.xs %]
    ++cxstack_ix;
    cxstack[cxstack_ix].blk_oldcop = PL_curcop;
    /* assert(cxstack_ix == 0); */
  [% END %]
    SAVETMPS;
  [% IF optimizer.dynaloader.fixups.coro %]
 /* needed before dl_init, and after init */
    {
        GV *sym;

        sym = gv_fetchpv("Coro",0,SVt_PV);
        if (sym && GvSVn(sym)) SvREADONLY_off(GvSVn(sym));

        sym = gv_fetchpv("Coro::API",0,SVt_PV);
        if (sym && GvSVn(sym)) SvREADONLY_off(GvSVn(sym));

        sym = gv_fetchpv("Coro::current",0,SVt_PV);
        if (sym && GvSVn(sym)) SvREADONLY_off(GvSVn(sym));

        sym = gv_fetchpv("Coro::pool_handler)",0,SVt_PVCV);
        if (sym && GvCV(sym)) SvREADONLY_off(GvCV(sym));
    }
  [% END %]
  [% IF optimizer.dynaloader.fixups.EV %]
  /* EV readonly symbols in BOOT (#368) */
    {
        GV *sym;

        sym = gv_fetchpv("EV::API",0,SVt_PV);
        if (sym && GvSVn(sym)) SvREADONLY_off(GvSVn(sym));
    }
  [% END %]
  [% FOREACH stashname IN optimizer.dynaloader.dl_modules %]
    [% NEXT IF ! xsub.$stashname.match('^Dynamic')  %]
    PUSHMARK(sp);

/* XXX -O1 or -O2 needs XPUSHs with dynamic pv */
    mXPUSHp("[% stashname %]", [% stashname.length %]);

/* XSLoader has the 2nd insanest API in whole Perl, right after make_warnings_object() */
#ifndef STATICXS
      [% IF xsub.$stashname == 'Dynamic' %]
    PUTBACK;
    call_method("DynaLoader::bootstrap_inherit", G_VOID|G_DISCARD);
      [% ELSE %]
        [% stashfile = xsub.$stashname.remove('^Dynamic-') %]
        [% IF stashfile %]
    mXPUSHp("[% stashfile %]", [% stashfile.length %]);
        [% END %]
    PUTBACK;
    call_pv("XSLoader::load_file", G_VOID|G_DISCARD);
      [% END %]
#else
    PUTBACK;
    /* CvSTASH(CvGV(cv)) is invalid without (issue 86) */
    /* TODO: utf8 stashname */
    { /* GH 333 */
        CV* cv = (CV*)SvREFCNT_inc_simple_NN(get_cv("[% stashname %]::bootstrap", GV_ADD));
        CvISXSUB_on(cv); /* otherwise a perl assertion fails. */
        cv->sv_any->xcv_padlist_u.xcv_hscxt = &PL_stack_sp; /* xs_handshake */
        boot_[% stashname.replace('::', '__') %](aTHX_ cv);
    }
#endif
    SPAGAIN;
/*    PUTBACK;*/
  [% END %]
    FREETMPS;
      [% IF optimizer.dynaloader.xs %]
    cxstack_ix--; /* i.e. POPBLOCK */
      [% END %]
    LEAVE;
/* end DynaLoader bootstrapping */
[% END %]
}

/************************************************************************************************************
*
*       output_main()
*
*************************************************************************************************************/

/* if USE_IMPLICIT_SYS, we need a 'real' exit */
#if defined(exit)
#undef exit
#endif

PerlInterpreter BC_unthreaded_interpreter;

int
main(int argc, char **argv, char **env)
{
    int exitstatus;
    int i;
    char **fakeargv;
    int options_count;

    /* Assure the interpreter struct is zeroed out. */
    Zero(&BC_unthreaded_interpreter, 1, PerlInterpreter);

#ifdef DEBUG_BENCHMARK
    clock_gettime(CLOCK_MONOTONIC_RAW, &start);
#endif
    PERL_SYS_INIT3(&argc,&argv,&env);

    assert(PL_do_undump == 0);

    init_pl_strtab(); /* Initialize PL_Strtab on our own before perl gets to it in perl_alloc. This allows us to use immportal constant shared HEKs */

	perl_construct( &BC_unthreaded_interpreter );
	PL_perl_destruct_level = 0;

#ifdef DEBUG_BENCHMARK
    PIO_stdout =  PerlIO_stdout();
    benchmark_time("got stdio");
#endif
    PL_exit_flags |= PERL_EXIT_DESTRUCT_END;

/* perlmain.c sets PL_use_safe_putenv so we must do this
   here as well.

   See perl's INSTALL file under
   Environment access for more information. */

#ifndef PERL_USE_SAFE_PUTENV
    PL_use_safe_putenv = 0;
#endif /* PERL_USE_SAFE_PUTENV */

/*  XXX With -e "" we need to fake parse_body() scriptname = BIT_BUCKET */
#ifdef ALLOW_PERL_OPTIONS
#define EXTRA_OPTIONS 3
#else
#define EXTRA_OPTIONS 4
#endif /* ALLOW_PERL_OPTIONS */
    benchmark_time("prenewx");
    Newx(fakeargv, argc + EXTRA_OPTIONS + 1, char *);
    fakeargv[0] = argv[0];
    fakeargv[1] = "-e";
    fakeargv[2] = "";
    options_count = 3;

  [% IF TAINT %]
/*  honour -T */
    fakeargv[options_count] = "-T";
    ++options_count;
  [% END %]

#ifndef ALLOW_PERL_OPTIONS
    fakeargv[options_count] = "--";
    ++options_count;
#endif /* ALLOW_PERL_OPTIONS */
    benchmark_time("for argc");
    for (i = 1; i < argc; i++)
	fakeargv[i + options_count - 1] = argv[i];
    fakeargv[argc + options_count - 1] = 0;

    benchmark_time("pre perl_parse");
    exitstatus = perl_parse(&BC_unthreaded_interpreter, xs_init, argc + options_count - 1,
			    fakeargv, env);
    benchmark_time("post perl_parse");
    if (exitstatus)
	exit( exitstatus );

    TAINT;

benchmark_time("pre global setup");

/* setup $0 on execution */
  [% IF use_perl_script_name %]
    sv_setpv_mg(get_sv("0", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_0 %]);
    CopFILE_set(&PL_compiling, [% global_vars.dollar_0 %]);
  [% ELSE %]
    sv_setpv_mg(get_sv("0", GV_ADD|GV_NOTQUAL), argv[0]);
    CopFILE_set(&PL_compiling, argv[0]);
  [% END %]

    [% IF global_vars.dollar_caret_H %]
    PL_hints = [% global_vars.dollar_caret_H %];
    [% END %]

    [% IF global_vars.dollar_caret_UNICODE %]
    PL_unicode = [% global_vars.dollar_caret_UNICODE %];
    [% END %]

    /* nomg */
    [% IF global_vars.dollar_semicolon.defined  %]
    sv_setpv(get_sv(";", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_semicolon %]);
    [% END %]

    [% IF global_vars.dollar_quote.defined  %]
    sv_setpv(get_sv("\"", GV_NOTQUAL), [% global_vars.dollar_quote %]); /* $" */
    [% END %]

    /* global IO vars */

    [% IF global_vars.dollar_comma %]
    sv_setpv_mg(GvSVn(PL_ofsgv), [% global_vars.dollar_comma %]); /* $, */
    [% END %]

    [% IF global_vars.dollar_backslash %]
    sv_setpv_mg(get_sv("\\", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_backslash %]); /* $\ */
    [% END %]

    [% IF global_vars.dollar_slash.defined  %]
    sv_setpv_mg(get_sv("/", GV_NOTQUAL), [% global_vars.dollar_slash %]); /* $/ a.k.a. RS */
    [% END %]

    [% IF global_vars.dollar_pipe %]
    sv_setiv_mg(get_sv("|", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_pipe %]); /* $| a.k.a. OUTPUT_AUTOFLUSH */
    [% END %]

    /* global format vars */

    [% IF global_vars.dollar_caret_A %]
    sv_setpv_mg(get_sv("^A", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_caret_A %]); /* $^A - #ACCUMULATOR */
    [% END %]

    [% IF global_vars.dollar_caret_L.defined  %]
    sv_setpv_mg(get_sv("^L", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_caret_L %]); /* $^L - FORMFEED */
    [% END %]

    [% IF global_vars.dollar_caret_L.defined  %]
    sv_setpv_mg(get_sv(":", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_colon %]); /* $: - LINE_BREAK_CHARACTERS */
    [% END %]

    [% IF global_vars.dollar_caret.defined  %]
    sv_setpv_mg(get_sv("^", GV_ADD|GV_NOTQUAL), savepvn([% global_vars.dollar_caret.str %], [% global_vars.dollar_caret.len %])); /* $^ - FORMAT_TOP_NAME */
    [% END %]

    [% IF global_vars.dollar_tilde.defined  %]
    sv_setpv_mg(get_sv("~", GV_ADD|GV_NOTQUAL), savepvn([% global_vars.dollar_tilde.str %], [% global_vars.dollar_tilde.len %])); /* $~ - FORMAT_NAME */
    [% END %]

    [% IF global_vars.dollar_percent %]
    sv_setiv_mg(get_sv("%", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_percent %]); /* $% - PAGE_NUMBER */
    [% END %]

    [% IF global_vars.dollar_minus.defined %]
    sv_setiv_mg(get_sv("-", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_minus %]);  /* $- - LINES_LEFT */
    [% END %]

    [% IF global_vars.dollar_equal.defined %]
    sv_setiv_mg(get_sv("=", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_equal %]); /* $= - LINES_PER_PAGE */
    [% END %]

    sv_setpv_mg(get_sv("\030", GV_ADD|GV_NOTQUAL), [% global_vars.dollar_caret_X %]); /* $^X - EXECUTABLE_NAME */

    benchmark_time("global vars setup done.");

    TAINT_NOT;

    /* PL_compcv used during compilation. */
    PL_compcv = MUTABLE_CV(newSV_type(SVt_PVCV));
    CvUNIQUE_on(PL_compcv);
    CvPADLIST(PL_compcv) = pad_new(0);

    /* our special compiled init */
    benchmark_time("init_assign");
    init_assign(aTHX);

    benchmark_time("preinit");
    perl_init(aTHX);

    benchmark_time("preinit1");
    perl_init1(aTHX);

    benchmark_time("init1 done");
    dl_init(aTHX);

    /* We need to output evals after dl_init, in init2  */
    [% FOREACH eval_pv IN all_eval_pvs %]
    [% eval_pv %]
    [% END %]
    benchmark_time("evals completed.");

    perl_init2(aTHX);
    benchmark_time("init2 done.");


    exitstatus = perl_run( &BC_unthreaded_interpreter );
    benchmark_time("program complete");

    /* init pre_destruct */
    [% FOREACH str IN section.init.pre_destruct() %]
    [% str %]
    [% END %]
    benchmark_time("pre_destruct() done");

    /* destruct */

    fast_perl_destruct( &BC_unthreaded_interpreter );

    /*  XXX endav is called via call_list and so it is freed right after usage. Setting dirty here is useless */
    /* [% UNLESS pv_copy_on_grow %]PL_dirty = 1;[% END %]   protect against pad undef in END block */

    PERL_SYS_TERM();

    exit( exitstatus );
}
